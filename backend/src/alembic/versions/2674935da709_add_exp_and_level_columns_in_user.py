"""add exp and level columns in user

Revision ID: 2674935da709
Revises: 28e4b0520a53
Create Date: 2020-10-19 14:27:04.132088

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "2674935da709"
down_revision = "28e4b0520a53"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.add_column('user', sa.Column('exp', sa.Float(), nullable=False, server_default="0"))
    # op.add_column('user', sa.Column('level', sa.Integer(), nullable=False, server_default="1"))
    # op.remove

    # op.add_column('user', sa.Column('uid', sa.String(), nullable=False))
    # op.create_unique_constraint(None, 'user', ['uid'])
    # op.drop_column('user', 'uuid')
    # ### end Alembic commands ###

    with op.batch_alter_table("user") as batch_op:
        batch_op.add_column(sa.Column("exp", sa.Float(), nullable=False, server_default="0"))
        batch_op.add_column(sa.Column("level", sa.Integer(), nullable=False, server_default="1"))
        batch_op.alter_column("uuid", new_column_name="uid")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("user", sa.Column("uuid", sa.VARCHAR(), nullable=False))
    op.drop_constraint(None, "user", type_="unique")
    op.drop_column("user", "uid")
    op.drop_column("user", "level")
    op.drop_column("user", "exp")
    # ### end Alembic commands ###
